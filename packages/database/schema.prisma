// @author: fatima bashir
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector"), pg_trgm]
}

// Core user model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  clerkId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile   Profile?
  skills    UserSkill[]
  artifacts Artifact[]
  activities Activity[]
  chatMessages ChatMessage[]

  @@map("users")
}

// Extended user profile with career information
model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  firstName       String?
  lastName        String?
  currentRole     String?
  targetRole      String?
  yearsExperience Int?
  hoursPerWeek    Int?     // Available hours for learning
  industry        String?
  location        String?
  bio             String?
  linkedinUrl     String?
  githubUrl       String?
  portfolioUrl    String?
  resumeUrl       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// Skill competencies and assessments
model UserSkill {
  id           String     @id @default(cuid())
  userId       String
  skillName    String
  category     String     // e.g., "technical", "soft", "domain"
  currentLevel Int        @default(0) // 0-10 scale
  targetLevel  Int        @default(0) // 0-10 scale
  priority     String     @default("medium") // high, medium, low
  status       String     @default("not_started") // not_started, in_progress, completed
  evidence     String[]   // Array of evidence/examples
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, skillName])
  @@map("user_skills")
}

// User-generated content and documents
model Artifact {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  type        String   // "resume", "project", "certificate", "portfolio"
  content     String?  // Text content for processing
  fileUrl     String?  // S3/Minio URL
  fileName    String?
  fileSize    Int?
  mimeType    String?
  tags        String[]
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  docChunks DocChunk[]

  @@map("artifacts")
}

// Learning activities and progress tracking
model Activity {
  id             String   @id @default(cuid())
  userId         String
  title          String
  description    String?
  type           String   // "lesson", "project", "interview", "assessment"
  status         String   @default("not_started") // not_started, in_progress, completed
  progress       Int      @default(0) // 0-100
  timeSpent      Int      @default(0) // minutes
  score          Float?   // assessment score
  feedback       String?  // AI feedback
  skillsTargeted String[] // Skills this activity targets
  metadata       Json?    // Additional structured data
  completedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

// Vector embeddings for RAG system
model DocChunk {
  id         String                 @id @default(cuid())
  artifactId String?
  content    String                 // The actual text content
  embedding  Unsupported("vector")? // pgvector embedding
  metadata   Json?                  // Additional metadata
  chunkIndex Int                    @default(0) // Position in document
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  // Relations
  artifact Artifact? @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  // Note: Vector indexes will be created manually via SQL migration
  // @@index([embedding], map: "doc_chunks_embedding_idx", type: Ivfflat)
  @@map("doc_chunks")
}

// Chat messages for the mentoring system
model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  role      String   // "user", "assistant", "system"
  content   String
  context   Json?    // Additional context for RAG
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Job descriptions and ATS optimization
model JobDescription {
  id              String   @id @default(cuid())
  title           String
  company         String?
  description     String
  requirements    String[]
  skills          String[]
  experienceLevel String?  // "entry", "mid", "senior", "executive"
  salary          String?
  location        String?
  remote          Boolean  @default(false)
  embedding       Unsupported("vector")?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Note: Vector indexes will be created manually via SQL migration
  // @@index([embedding], map: "job_descriptions_embedding_idx", type: Ivfflat)
  @@map("job_descriptions")
}

// Interview sessions and scoring
model InterviewSession {
  id              String   @id @default(cuid())
  userId          String
  type            String   // "behavioral", "technical", "system_design"
  questions       Json     // Array of questions
  responses       Json     // Array of responses
  rubricScores    Json     // Structured scoring
  overallScore    Float?
  feedback        String?
  duration        Int?     // minutes
  completedAt     DateTime?
  createdAt       DateTime @default(now())

  @@map("interview_sessions")
}

// Learning modules and curriculum
model LearningModule {
  id           String   @id @default(cuid())
  title        String
  description  String?
  difficulty   String   @default("beginner") // beginner, intermediate, advanced
  duration     Int?     // estimated minutes
  skills       String[] // Skills covered
  content      Json?    // Structured content
  prerequisites String[] // Required modules/skills
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("learning_modules")
}

